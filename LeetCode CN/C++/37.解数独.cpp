/*
 * @lc app=leetcode.cn id=37 lang=cpp
 *
 * [37] 解数独
 *
 * https://leetcode.cn/problems/sudoku-solver/description/
 *
 * algorithms
 * Hard (67.61%)
 * Likes:    1746
 * Dislikes: 0
 * Total Accepted:    223.2K
 * Total Submissions: 330.1K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 编写一个程序，通过填充空格来解决数独问题。
 * 
 * 数独的解法需 遵循如下规则：
 * 
 * 
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 
 * 
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 
 * 
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
 * 
 * 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
 * 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
 * 
 * 
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 题目数据 保证 输入数独仅有一个解
 * 
 * 
 * 
 * 
 * 
 */

// @lc code=start
class Solution {
public:

    void solveSudoku(vector<vector<char>>& b) {
        vector<vector<char>> c;
        vector<int> row(9,0);
        vector<int> col(9,0);
        vector<vector<int>> block(9,vector<int>(9,0));
        
        
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(b[i][j]!='.'){
                    int mask = 1<<(b[i][j] - '0');
                    row[i] |= mask;
                    col[j] |= mask;
                    block[i/3][j/3] |= mask;
                }
            }
        }

        dfs(b,row,col,block,c,0,0);
    }

    bool dfs(vector<vector<char>>& b,vector<int>& row,vector<int>& col,vector<vector<int>>& block,vector<vector<char>>& c,int x,int y){
        if(x==9){
            c = b;
            return true;
        }
        if(y==9){
            return dfs(b,row,col,block,c,x+1,0);
        }

        if (b[x][y] != '.') {
            return dfs(b,row,col,block,c,x,y+1);  
        }

        
        for(int n=1;n<=9;n++){
            int mask = 1<<n;
            if(!(row[x]&mask) && !(col[y]&mask) && !(block[x/3][y/3]&mask)){
                b[x][y] = n + '0';
                row[x] |= mask;
                col[y] |= mask;
                block[x/3][y/3] |= mask;
                if(dfs(b,row,col,block,c,x,y+1)){
                    return true;
                }
                b[x][y] = '.';
                row[x] &= ~mask;
                col[y] &= ~mask;
                block[x/3][y/3] &= ~mask;
            }
        }
        
        return false;
    }
};
// @lc code=end

